'use client'

import type React from 'react'

import { useState, useEffect } from 'react'
import { Search, Plus, Edit, Trash2, X, AlertCircle } from 'lucide-react'
import { Link } from 'react-router-dom'
import {
    getCategories,
    deleteCategory,
    updateCategory,
    createCategory,
} from '../../../services/apiCategory.service'
import { Category } from '../../../types/category'

interface CategoryModalProps {
    isOpen: boolean
    onClose: () => void
    category: Category | null
    onSave: (category: Category) => void
    allCategories: Category[]
}

export default function CategoryManagement() {
    const [categories, setCategories] = useState<Category[]>([])
    const [searchTerm, setSearchTerm] = useState('')
    const [isModalOpen, setIsModalOpen] = useState(false)
    const [editingCategory, setEditingCategory] = useState<Category | null>(
        null,
    )
    const [loading, setLoading] = useState(false)
    const [error, setError] = useState<string | null>(null)

    // T·∫£i danh s√°ch danh m·ª•c
    const loadCategories = async () => {
        setLoading(true)
        setError(null)
        try {
            const response = await getCategories()
            // Th√™m tr∆∞·ªùng color v√† productCount cho UI n·∫øu kh√¥ng c√≥
            const categoriesWithUI = response.data.map((category) => ({
                ...category,
                color: category.color || getRandomColor(),
                productCount: category.productCount || 0,
            }))
            setCategories(categoriesWithUI)
        } catch (err) {
            setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch danh m·ª•c. Vui l√≤ng th·ª≠ l·∫°i sau.')
            console.error('Error loading categories:', err)
        } finally {
            setLoading(false)
        }
    }

    // T·∫£i d·ªØ li·ªáu khi component mount
    useEffect(() => {
        loadCategories()
    }, [])

    // X·ª≠ l√Ω t√¨m ki·∫øm
    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearchTerm(e.target.value)
    }

    // L·ªçc danh m·ª•c theo t·ª´ kh√≥a t√¨m ki·∫øm
    const filteredCategories = categories.filter(
        (category) =>
            category.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            category.description
                ?.toLowerCase()
                .includes(searchTerm.toLowerCase()),
    )

    // M·ªü modal th√™m danh m·ª•c m·ªõi
    const handleAddCategory = () => {
        setEditingCategory(null)
        setIsModalOpen(true)
    }

    // M·ªü modal ch·ªânh s·ª≠a danh m·ª•c
    const handleEditCategory = (category: Category) => {
        setEditingCategory(category)
        setIsModalOpen(true)
    }

    // X·ª≠ l√Ω x√≥a danh m·ª•c
    const handleDeleteCategory = async (id: string) => {
        if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c n√†y kh√¥ng?')) {
            try {
                await deleteCategory(id)
                loadCategories() // T·∫£i l·∫°i danh s√°ch danh m·ª•c
            } catch (err) {
                console.error('Error deleting category:', err)
            }
        }
    }

    // X·ª≠ l√Ω l∆∞u danh m·ª•c (th√™m m·ªõi ho·∫∑c c·∫≠p nh·∫≠t)
    const handleSaveCategory = async (category: Category) => {
        try {
            if (category._id) {
                // C·∫≠p nh·∫≠t danh m·ª•c hi·ªán c√≥
                await updateCategory(category._id, category)
            } else {
                // Th√™m danh m·ª•c m·ªõi
                await createCategory(category)
            }
            setIsModalOpen(false)
            loadCategories() // T·∫£i l·∫°i danh s√°ch danh m·ª•c
        } catch (err) {
            console.error('Error saving category:', err)
        }
    }

    // T·∫°o m√†u ng·∫´u nhi√™n cho danh m·ª•c
    const getRandomColor = () => {
        const colors = [
            'bg-blue-100',
            'bg-green-100',
            'bg-red-100',
            'bg-yellow-100',
            'bg-purple-100',
            'bg-pink-100',
            'bg-indigo-100',
            'bg-teal-100',
            'bg-orange-100',
            'bg-amber-100',
            'bg-lime-100',
            'bg-emerald-100',
            'bg-cyan-100',
            'bg-gray-100',
        ]
        return colors[Math.floor(Math.random() * colors.length)]
    }

    return (
        <div className="p-6">
            <div className="mb-6">
                <h1 className="text-2xl font-semibold text-gray-800">
                    Danh m·ª•c s·∫£n ph·∫©m
                </h1>
                <div className="flex items-center text-sm text-gray-500">
                    <Link to="/dashboard" className="hover:text-teal-500">
                        Trang ch·ªß
                    </Link>
                    <span className="mx-2">‚Ä¢</span>
                    <Link to="/products" className="hover:text-teal-500">
                        S·∫£n ph·∫©m
                    </Link>
                    <span className="mx-2">‚Ä¢</span>
                    <span>Danh m·ª•c s·∫£n ph·∫©m</span>
                </div>
            </div>

            <div className="rounded-lg bg-white p-6 shadow-sm">
                <div className="mb-6 flex items-center justify-between">
                    <div className="relative w-80">
                        <div className="absolute top-1/2 left-3 -translate-y-1/2 transform text-gray-400">
                            <Search size={16} />
                        </div>
                        <input
                            placeholder="T√¨m ki·∫øm danh m·ª•c"
                            className="w-full rounded-md border border-gray-300 py-2 pr-4 pl-10 focus:border-transparent focus:ring-2 focus:ring-teal-500 focus:outline-none"
                            value={searchTerm}
                            onChange={handleSearch}
                        />
                    </div>
                    <button
                        className="flex items-center rounded-md bg-teal-500 px-4 py-2 text-white hover:bg-teal-600"
                        onClick={handleAddCategory}
                    >
                        <Plus size={16} className="mr-1" /> Th√™m danh m·ª•c
                    </button>
                </div>

                {error && (
                    <div className="mb-6 flex items-center rounded-md border border-red-200 bg-red-50 p-4 text-red-600">
                        <AlertCircle size={18} className="mr-2" />
                        {error}
                    </div>
                )}

                {loading ? (
                    <div className="py-8 text-center">
                        <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-teal-500 border-t-transparent"></div>
                        <p className="mt-2 text-gray-500">
                            ƒêang t·∫£i danh m·ª•c...
                        </p>
                    </div>
                ) : (
                    <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
                        {filteredCategories.length === 0 ? (
                            <div className="col-span-full py-8 text-center text-gray-500">
                                Kh√¥ng t√¨m th·∫•y danh m·ª•c n√†o
                            </div>
                        ) : (
                            filteredCategories.map((category) => (
                                <div
                                    key={category._id}
                                    className={`${category.color} relative overflow-hidden rounded-lg border border-gray-200 p-4`}
                                >
                                    <div className="mb-2 flex items-start justify-between">
                                        <div className="flex items-center">
                                            <span className="mr-2 text-2xl">
                                                {category.icon || 'üìÅ'}
                                            </span>
                                            <div>
                                                <h3 className="text-lg font-medium">
                                                    {category.name}
                                                </h3>
                                                <p className="text-sm text-gray-600">
                                                    {category.description}
                                                </p>
                                            </div>
                                        </div>
                                        <div className="flex space-x-1">
                                            <button
                                                className="rounded-full p-1 hover:bg-white"
                                                onClick={() =>
                                                    handleEditCategory(category)
                                                }
                                                title="Ch·ªânh s·ª≠a"
                                            >
                                                <Edit
                                                    size={16}
                                                    className="text-gray-600"
                                                />
                                            </button>
                                            <button
                                                className="rounded-full p-1 hover:bg-white"
                                                onClick={() =>
                                                    handleDeleteCategory(
                                                        category._id as string,
                                                    )
                                                }
                                                title="X√≥a"
                                            >
                                                <Trash2
                                                    size={16}
                                                    className="text-gray-600"
                                                />
                                            </button>
                                        </div>
                                    </div>
                                    <div className="mt-2 text-sm text-gray-600">
                                        <span className="font-medium">
                                            {category.productCount}
                                        </span>{' '}
                                        s·∫£n ph·∫©m
                                    </div>
                                </div>
                            ))
                        )}
                    </div>
                )}
            </div>

            {isModalOpen && (
                <CategoryModal
                    isOpen={isModalOpen}
                    onClose={() => setIsModalOpen(false)}
                    category={editingCategory}
                    onSave={handleSaveCategory}
                    allCategories={categories}
                />
            )}
        </div>
    )
}

function CategoryModal({
    isOpen,
    onClose,
    category,
    onSave,
}: CategoryModalProps) {
    const [formData, setFormData] = useState<Partial<Category>>(
        category || {
            name: '',
            slug: '',
            description: '',
            color: 'bg-blue-100',
            icon: 'üìÅ',
        },
    )

    const handleChange = (
        e: React.ChangeEvent<
            HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
        >,
    ) => {
        const { name, value } = e.target
        setFormData({ ...formData, [name]: value })
    }

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault()
        // T·∫°o slug t·ª´ t√™n n·∫øu kh√¥ng c√≥
        const slug =
            formData.slug ||
            formData.name?.toLowerCase().replace(/\s+/g, '-') ||
            ''
        onSave({ ...(formData as Category), slug })
    }

    const colorOptions = [
        { value: 'bg-blue-100', label: 'Xanh d∆∞∆°ng' },
        { value: 'bg-green-100', label: 'Xanh l√°' },
        { value: 'bg-red-100', label: 'ƒê·ªè' },
        { value: 'bg-yellow-100', label: 'V√†ng' },
        { value: 'bg-purple-100', label: 'T√≠m' },
        { value: 'bg-pink-100', label: 'H·ªìng' },
        { value: 'bg-indigo-100', label: 'Ch√†m' },
        { value: 'bg-teal-100', label: 'Xanh ng·ªçc' },
        { value: 'bg-orange-100', label: 'Cam' },
        { value: 'bg-amber-100', label: 'H·ªï ph√°ch' },
        { value: 'bg-lime-100', label: 'Chanh' },
        { value: 'bg-emerald-100', label: 'Ng·ªçc l·ª•c b·∫£o' },
        { value: 'bg-cyan-100', label: 'Xanh l∆°' },
        { value: 'bg-gray-100', label: 'X√°m' },
    ]

    if (!isOpen) return null

    return (
        <div className="bg-opacity-50 fixed inset-0 z-50 flex items-center justify-center bg-black/50">
            <div className="w-full max-w-md rounded-lg bg-white shadow-xl">
                <div className="flex items-center justify-between border-b p-6">
                    <h2 className="text-xl font-semibold">
                        {category ? 'Ch·ªânh s·ª≠a danh m·ª•c' : 'Th√™m danh m·ª•c m·ªõi'}
                    </h2>
                    <button
                        onClick={onClose}
                        className="text-gray-500 hover:text-gray-700"
                    >
                        <X size={20} />
                    </button>
                </div>

                <form onSubmit={handleSubmit}>
                    <div className="space-y-4 p-6">
                        <div>
                            <label
                                htmlFor="name"
                                className="mb-1 block text-sm font-medium text-gray-700"
                            >
                                T√™n danh m·ª•c{' '}
                                <span className="text-red-500">*</span>
                            </label>
                            <input
                                type="text"
                                id="name"
                                name="name"
                                value={formData.name || ''}
                                onChange={handleChange}
                                required
                                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:outline-none"
                                placeholder="Nh·∫≠p t√™n danh m·ª•c"
                            />
                        </div>

                        <div>
                            <label
                                htmlFor="slug"
                                className="mb-1 block text-sm font-medium text-gray-700"
                            >
                                Slug
                            </label>
                            <input
                                type="text"
                                id="slug"
                                name="slug"
                                value={formData.slug || ''}
                                onChange={handleChange}
                                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:outline-none"
                                placeholder="T·ª± ƒë·ªông t·∫°o t·ª´ t√™n n·∫øu ƒë·ªÉ tr·ªëng"
                            />
                        </div>

                        <div>
                            <label
                                htmlFor="description"
                                className="mb-1 block text-sm font-medium text-gray-700"
                            >
                                M√¥ t·∫£
                            </label>
                            <textarea
                                id="description"
                                name="description"
                                value={formData.description || ''}
                                onChange={handleChange}
                                rows={2}
                                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:outline-none"
                                placeholder="Nh·∫≠p m√¥ t·∫£ danh m·ª•c"
                            ></textarea>
                        </div>

                        <div>
                            <label
                                htmlFor="color"
                                className="mb-1 block text-sm font-medium text-gray-700"
                            >
                                M√†u s·∫Øc
                            </label>
                            <select
                                id="color"
                                name="color"
                                value={formData.color || 'bg-blue-100'}
                                onChange={handleChange}
                                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:outline-none"
                            >
                                {colorOptions.map((option) => (
                                    <option
                                        key={option.value}
                                        value={option.value}
                                    >
                                        {option.label}
                                    </option>
                                ))}
                            </select>
                        </div>
                    </div>

                    <div className="flex justify-end gap-3 border-t p-6">
                        <button
                            type="button"
                            onClick={onClose}
                            className="rounded-md border border-gray-300 px-4 py-2 text-gray-700 hover:bg-gray-50"
                        >
                            H·ªßy
                        </button>
                        <button
                            type="submit"
                            className="rounded-md bg-teal-500 px-4 py-2 text-white hover:bg-teal-600"
                        >
                            {category ? 'C·∫≠p nh·∫≠t' : 'Th√™m danh m·ª•c'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    )
}
